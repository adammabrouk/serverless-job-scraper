AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Forage Tools Infrastructure

Parameters:

  EnvironmentParameter:
    Type: String
    Description: "Name of deployment environment"
    Default: dev

  ApifyToken:
    Type: String
    Description: "Programatic Token used in Apify"

  ApifyInputWebhookUrl:
    Type: String
    Description: "URL Of the webhook used to send data to Apify"

Resources:    

# ----------------------------------------
#            Lambda Functions    
# ----------------------------------------

  TriggerApifyScrapper:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join [ "-", [ !Ref EnvironmentParameter, TriggerApifyScrapper ] ]
      CodeUri: src/functions/trigger_apify_scraper
      Handler: handler.handler
      Runtime: python3.8
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UserJobSubscriptionsTable
      - S3CrudPolicy:
          BucketName: !Ref UserReportsBucket
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref UserJobSubscriptionsTable
          APIFY_WEBHOOK_URL: !Ref ApifyInputWebhookUrl
          USER_REPORTS_S3_BUCKET: !Ref UserReportsBucket

      # Events:
      #   ScrapeFromGoogleJobsEvent:
      #     Type: Schedule
      #     Properties:
      #       Schedule: rate(5 minutes) # TODO : change this value when schedule time has been defined

  HandleApifyWebhoook:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join [ "-", [ !Ref EnvironmentParameter, HandleApifyWebhook ] ]
      CodeUri: src/functions/handle_apify_webhook
      Handler: handler.handler
      Runtime: python3.8
      Policies:
      - S3CrudPolicy:
          BucketName: !Ref UserReportsBucket
      Environment:
        Variables:
          APIFY_TOKEN: !Ref ApifyToken
          USER_REPORTS_S3_BUCKET: !Ref UserReportsBucket

# ----------------------------------------
#             DynamoDBTables
# ----------------------------------------

  UserJobSubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${EnvironmentParameter}-UserJobSubscriptions
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
        - AttributeName: subscription_id
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
        - AttributeName: subscription_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

# ----------------------------------------
#               S3 Buckets
# ----------------------------------------

  UserReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", [ !Ref EnvironmentParameter, user-reports-bucket ] ]
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - HEAD
              - POST
              - PUT
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
      AccessControl: Private